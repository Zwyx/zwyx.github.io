"use strict";(self.webpackChunkzwyx_dev=self.webpackChunkzwyx_dev||[]).push([[6555],{7280:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>h,default:()=>x,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var i=r(5174),s=r(4848),t=r(8453),a=r(4341),c=r(7527);const l={slug:"archiving-git-branches",title:"Tidy up a Git repo by archiving branches",description:"Reduce the amount of branches without necessarily deleting them.",image:"./branches.webp",authors:["alex"],tags:["git","branch","archive"]},h=void 0,o={image:r(6601).A,authorsImageUrls:[void 0]},d=[{value:"Git refs",id:"git-refs",level:2},{value:"Archive a branch",id:"archive-a-branch",level:2},{value:"Restore a branch",id:"restore-a-branch",level:2},{value:"Other useful commands",id:"other-useful-commands",level:2}];function p(e){const n={admonition:"admonition",code:"code",em:"em",h2:"h2",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a._,{src:c.A,alt:"Tree branches"}),"\n",(0,s.jsx)(n.p,{children:"Reduce the amount of branches without necessarily deleting them"}),"\n","\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This article contains ideas and suggestions for an more advanced use of Git; it's intended for people who already know its basic usage."})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"When working on a code base, alone or with a team, we can end up with a lot of branches that are inactive. They are experiments that have never been completed, for instance."}),"\n",(0,s.jsx)(n.p,{children:"The presence of these forgotten branches can be bothering:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["when using the CLI, auto-completion for ",(0,s.jsx)(n.code,{children:"git checkout"})," will be cluttered;"]}),"\n",(0,s.jsx)(n.li,{children:"when using an interface such as GitHub, to select a branch in order to create a pull request or run an action, the list will be long;"}),"\n",(0,s.jsxs)(n.li,{children:["generally, you may find that having loads of branches in your repo is like having loads ",(0,s.jsx)(n.em,{children:"TODOs-that-will-never-be-done"})," on your TODO list. Or loads of ",(0,s.jsx)(n.em,{children:'"in progress"'})," tickets on a Kanban board."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"However, deleting these branches might not be possible. Some could be useful in the future. Some people in your team might want to delete them while others want to keep them."}),"\n",(0,s.jsxs)(n.p,{children:["A solution is to \u201carchive\u201d these branches by storing them separately from the normal git branches. The archived branches won't show up in ",(0,s.jsx)(n.code,{children:"git branch"})," anymore, but they will stay available if someone wants to resume work on them."]}),"\n",(0,s.jsx)(n.h2,{id:"git-refs",children:"Git refs"}),"\n",(0,s.jsxs)(n.p,{children:["Git stores local branches in ",(0,s.jsx)(n.code,{children:"refs/heads"}),". For instance, a branch called branch will be in ",(0,s.jsx)(n.code,{children:"refs/heads/branch"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Remote branches are in ",(0,s.jsx)(n.code,{children:"refs/remote/<remote-name>"}),". For instance, ",(0,s.jsx)(n.code,{children:"refs/remote/origin/branch"}),". There are also ",(0,s.jsx)(n.code,{children:"refs/tags"}),", ",(0,s.jsx)(n.code,{children:"refs/stash"}),", ",(0,s.jsx)(n.code,{children:"refs/notes"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["To archive a branch, we can place them in a newly created ref, for instance: ",(0,s.jsx)(n.code,{children:"refs/experiments"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If we are in a team we can add a sub-level with the name of the developers: ",(0,s.jsx)(n.code,{children:"refs/experiments/<developer-name>"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The following sections explains the commands allowing us to achieve this."}),"\n",(0,s.jsx)(n.h2,{id:"archive-a-branch",children:"Archive a branch"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Save the branch in the ",(0,s.jsx)(n.code,{children:"experiments"})," ref:"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git update-ref refs/experiments/alice/branch branch"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Push the experiment to the remote:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git push origin refs/experiments/alice/branch"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Delete the original branch, locally and on the remote:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git branch -d branch"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git push -d origin branch"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"restore-a-branch",children:"Restore a branch"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a branch that points to the same commit than the experiment:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git checkout -b branch refs/experiments/alice/branch"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Optional, delete the experiment, locally and on the remote:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git update-ref -d refs/experiments/alice/branch"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git push -d origin refs/experiments/alice/branch"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"other-useful-commands",children:"Other useful commands"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"View all experiments:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git for-each-ref | grep refs/experiments"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Push all experiments to the remote:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'git push origin "refs/experiments/*"'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Fetch all experiments present on the remote:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'git fetch origin "refs/experiments/*:refs/experiments/*"'})}),"\n",(0,s.jsx)(n.p,{children:"(or:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:'git fetch origin "+refs/experiments/\\*:refs/experiments/\\*"'})}),"\n",(0,s.jsxs)(n.p,{children:["but careful: ",(0,s.jsx)(n.strong,{children:"this will erase all experiments present locally"}),")"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"See everything that's in refs on a remote repository:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git clone --mirror <repo>"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"cd <repo>"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.code,{children:"git for-each-ref"})}),"\n",(0,s.jsx)(n.p,{children:"Doing this on a GitHub repository which has had pull requests, you will notice that GitHub creates refs/pull and stores all pull requests in it."}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},4341:(e,n,r)=>{r.d(n,{_:()=>p});var i=r(53);const s="imageWrapper_u91s",t="withLegend_q8O0",a="frame_zT4L",c="visible_KgQe",l="image_Y_cJ",h="legend_xj0V";var o=r(4848);const d=e=>{let{children:n}=e;return(0,o.jsx)("div",{className:h,children:n})},p=e=>{let{src:n,alt:r,width:h,height:p,withFrame:x,legend:u,borderRadius:m,children:g}=e;const b=u||g;return(0,o.jsxs)("div",{className:(0,i.A)(s,b&&t),children:[(0,o.jsx)("div",{style:{borderRadius:m},className:(0,i.A)(a,x&&c),children:(0,o.jsx)("img",{style:{borderRadius:m},className:l,src:n,alt:r||("string"==typeof b?b:""),width:h,height:p})}),b&&(0,o.jsx)(d,{children:b})]})}},53:(e,n,r)=>{function i(e){var n,r,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(r=i(e[n]))&&(s&&(s+=" "),s+=r);else for(n in e)e[n]&&(s&&(s+=" "),s+=n);return s}r.d(n,{A:()=>s});const s=function(){for(var e,n,r=0,s="";r<arguments.length;)(e=arguments[r++])&&(n=i(e))&&(s&&(s+=" "),s+=n);return s}},6601:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/branches-1bd3552051ab477a198c0f99fce33fd2.webp"},7527:(e,n,r)=>{r.d(n,{A:()=>i});const i=r.p+"assets/images/branches-1bd3552051ab477a198c0f99fce33fd2.webp"},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},5174:e=>{e.exports=JSON.parse('{"permalink":"/blog/archiving-git-branches","editUrl":"https://github.com/zwyx/zwyx.dev/tree/master/blog/2021-10-23-archiving-git-branches/index.mdx","source":"@site/blog/2021-10-23-archiving-git-branches/index.mdx","title":"Tidy up a Git repo by archiving branches","description":"Reduce the amount of branches without necessarily deleting them.","date":"2021-10-23T00:00:00.000Z","tags":[{"inline":true,"label":"git","permalink":"/blog/tags/git"},{"inline":true,"label":"branch","permalink":"/blog/tags/branch"},{"inline":true,"label":"archive","permalink":"/blog/tags/archive"}],"readingTime":2.475,"hasTruncateMarker":true,"authors":[{"name":"Alex","title":"Web developer","email":"alex@zwyx.dev","url":"https://github.com/Zwyx","imageURL":"https://github.com/zwyx.png","key":"alex","page":null}],"frontMatter":{"slug":"archiving-git-branches","title":"Tidy up a Git repo by archiving branches","description":"Reduce the amount of branches without necessarily deleting them.","image":"./branches.webp","authors":["alex"],"tags":["git","branch","archive"]},"unlisted":false,"prevItem":{"title":"Google Authenticator export format","permalink":"/blog/google-authenticator-export-format"},"nextItem":{"title":"Multiple shared password stores with Git and pass","permalink":"/blog/shared-password-stores"}}')}}]);